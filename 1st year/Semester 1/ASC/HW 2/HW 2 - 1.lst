     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; Write a program in assembly language which computes one of the following arithmetic expressions, considering the following domains for the variables (in the unsigned and signed representation).
     4                                  
     5                                  ;Addtions, subtractions
     6                                  ; 3. (c+d)-(a+d)+b
     7                                  
     8                                  global start        
     9                                  
    10                                  
    11                                  extern exit               
    12                                  import exit msvcrt.dll    
    13                                                            
    14                                  
    15                                  segment data use32 class=data
    16 00000000 05                          a db 5
    17 00000001 0300                        b dw 3
    18 00000003 07000000                    c dd 7
    19 00000007 0200000000000000            d dq 2
    20                                      
    21                                  
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 A1[03000000]                    mov eax, [c]        ;eax = c
    25 00000005 BA00000000                      mov edx, 0          ;edx : eax = c
    26 0000000A 0305[07000000]                  add eax, dword [d]  
    27 00000010 0315[0B000000]                  add edx, dword [d+4] ;edx : eax = c + d
    28                                          
    29 00000016 8A1D[00000000]                  mov bl, [a]
    30 0000001C B700                            mov bh, 0
    31 0000001E 66B90000                        mov cx, 0       ;cx : bx = a
    32                                          
    33 00000022 6651                            push cx
    34 00000024 6653                            push bx
    35 00000026 5B                              pop ebx         ;ebx = a
    36                                          
    37 00000027 B900000000                      mov ecx, 0
    38 0000002C 031D[07000000]                  add ebx, dword [d]
    39 00000032 030D[0B000000]                  add ecx, dword [d+4]        ;ecx : ebx = a + d
    40                                          
    41 00000038 19D8                            sbb eax, ebx
    42 0000003A 19CA                            sbb edx, ecx            ;edx : eax - ecx : ebx = (c+d) - (a+d)
    43                                          
    44 0000003C 668B1D[01000000]                mov bx, [b]
    45 00000043 66B90000                        mov cx, 0
    46 00000047 6651                            push cx
    47 00000049 6653                            push bx
    48 0000004B 5B                              pop ebx         ;ebx = b
    49 0000004C B900000000                      mov ecx, 0      ;ecx : ebx = b
    50 00000051 11D8                            adc eax, ebx
    51 00000053 11CA                            adc edx, ecx    ;edx : eax = (c+d)-(a+d)+b
    52                                          
    53 00000055 6A00                            push    dword 0      
    54 00000057 FF15[00000000]                  call    [exit]   
    55                                          
