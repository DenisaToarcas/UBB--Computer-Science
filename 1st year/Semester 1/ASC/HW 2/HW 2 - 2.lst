     1                                  bits 32 
     2                                  
     3                                  ; Write a program in assembly language which computes one of the following arithmetic expressions, considering the following domains for the variables (in the unsigned and signed representation).
     4                                  
     5                                  ; Additions, subtractions - signed
     6                                  ; 3. (b+b+d)-(c+a)
     7                                  
     8                                  global start        
     9                                  
    10                                  
    11                                  extern exit               
    12                                  import exit msvcrt.dll    
    13                                  
    14                                  
    15                                  segment data use32 class=data
    16 00000000 02                          a db 2
    17 00000001 0500                        b dw 5
    18 00000003 03000000                    c dd 3
    19 00000007 0400000000000000            d dq 4
    20                                  
    21                                  segment code use32 class=code
    22                                      start:
    23                                          
    24 00000000 66A1[01000000]                  mov ax, [b]
    25 00000006 660305[01000000]                add ax, [b]
    26                                          
    27 0000000D 98                              cwde            ;ax -> eax => eax = b+b
    28                                          
    29 0000000E BA00000000                      mov edx, 0
    30 00000013 1305[07000000]                  adc eax, dword [d]
    31 00000019 1315[0B000000]                  adc edx, dword [d+4]    ;edx : eax = b+b+d
    32                                          
    33 0000001F 89C3                            mov ebx, eax
    34 00000021 89D1                            mov ecx, edx            ;ecx : ebx = b+b+d
    35                                          
    36 00000023 A0[00000000]                    mov al, [a]
    37 00000028 6698                            cbw             ;al -> ax => ax = a
    38 0000002A 98                              cwde            ;eax = a
    39                                          
    40 0000002B 8B15[03000000]                  mov edx, [c]
    41 00000031 11D0                            adc eax, edx    ;eax = c+a
    42                                          
    43 00000033 BA00000000                      mov edx, 0      ;edx : eax = c+a
    44 00000038 19C3                            sbb ebx, eax
    45 0000003A 19D1                            sbb ecx, edx        ;ecx : ebx = (b+b+d)-(c+a)
    46                                          
    47 0000003C B800000000                      mov eax, 0
    48 00000041 BA00000000                      mov edx, 0
    49 00000046 89D8                            mov eax, ebx
    50 00000048 89CA                            mov edx, ecx
    51                                          
    52 0000004A 6A00                            push    dword 0      
    53 0000004C FF15[00000000]                  call    [exit]      
