     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ;3. Given the words A and B, compute the doubleword C as follows:
     4                                  ;the bits 0-2 of C are the same as the bits 12-14 of A
     5                                  ;the bits 3-8 of C are the same as the bits 0-5 of B
     6                                  ;the bits 9-15 of C are the same as the bits 3-9 of A
     7                                  ;the bits 16-31 of C are the same as the bits of A
     8                                  
     9                                  
    10                                  
    11                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    12                                  global start        
    13                                  
    14                                  ; declare external functions needed by our program
    15                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    16                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    17                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    18                                  
    19                                  ; our data is declared here (the variables needed by our program)
    20                                  segment data use32 class=data
    21 00000000 5777                       a dw 0111011101010111b
    22 00000002 BE9B                       b dw 1001101110111110b
    23 00000004 00000000                   c dd 0
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ;the bits 0-2 of C are the same as the bits 12-14 of A
    29                                          
    30 00000000 66BB0000                        mov bx, 0000000000000000b           ;we compute the result in bx
    31                                          
    32 00000004 66A1[00000000]                  mov ax, [a]                         ;we isolate the bits 12-14 of a
    33 0000000A 66250070                        and ax, 0111000000000000b
    34                                          
    35 0000000E B10C                            mov cl, 12          
    36 00000010 66D3C8                          ror ax, cl                          ;we rotate 12 positions to the right
    37 00000013 6609C3                          or bx, ax
    38                                          
    39                                          ;the bits 3-8 of C are the same as the bits 0-5 of B
    40                                          
    41 00000016 66A1[02000000]                  mov ax, [b]                         ;we isolate the bits 0-5 of be
    42 0000001C 6683E03F                        and ax, 0000000000111111b
    43                                          
    44 00000020 B103                            mov cl, 3
    45 00000022 66D3C0                          rol ax, cl                          ;we rotate 3 positions to the left
    46 00000025 6609C3                          or bx, ax
    47                                          
    48                                          ;the bits 9-15 of C are the same as the bits 3-9 of A
    49                                          
    50 00000028 66A1[00000000]                  mov ax, [a]                         ;we isolate the bits 3-9 of A
    51 0000002E 6625F803                        and ax, 0000001111111000b
    52                                          
    53 00000032 B106                            mov cl, 6
    54 00000034 66D3C0                          rol ax, cl                          ;we rotate 6 positions to the left
    55 00000037 6609C3                          or bx, ax
    56                                          
    57                                         ;the bits 16-31 of C are the same as the bits of A
    58                                  
    59 0000003A 66A1[02000000]                  mov ax, [b]                         ;we transform the word B in a doubleword
    60 00000040 66BA0000                        mov dx, 0
    61 00000044 6652                            push dx
    62 00000046 6650                            push ax
    63 00000048 58                              pop eax
    64                                          
    65 00000049 B110                            mov cl, 16                          ;we rotate 16 positions to the left
    66 0000004B C1C010                          rol eax, 16
    67                                          
    68 0000004E 66B90000                        mov cx, 0
    69 00000052 6651                            push cx
    70 00000054 6653                            push bx
    71 00000056 5B                              pop ebx
    72                                          
    73 00000057 09C3                            or ebx, eax
    74 00000059 891D[04000000]                  mov [c], ebx
    75                                          
    76 0000005F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000061 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    78                                  
